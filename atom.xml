<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, DIYgod</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://diygod.me/"/>
  <updated>2018-06-12T18:29:45.695Z</updated>
  <id>https://diygod.me/</id>
  
  <author>
    <name>DIYgod</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Polymer 初体验</title>
    <link href="https://diygod.me/polymer/"/>
    <id>https://diygod.me/polymer/</id>
    <published>2018-05-30T23:45:43.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p>作为开发者，我们都知道组件化、标准化和代码复用的重要性，前端也从未停止过对前端组件化的尝试，产生了各式各样的组件化技术，从 Vue React 等前端框架，到 webpack 这样的全站打包工具</p><p>但前端一直缺乏这样一个模块化标准和浏览器级别的原生组件化方案</p><p>Web Components 是 WHATWG 和 W3C 正在尝试的 Web 组件化方案，为组件化的前端开发提供浏览器级别的支持。它由四项主要技术组成：Shadow DOM、Custom Elements、HTML Import、HTML Template</p><p>Polymer 项目是 Google 的基于 Web Components 机制的框架，定位于简单的 Polyfill 和易用性封装，包括数据绑定，模板声明，事件系统等。Google 在去年就已经将其应用到了 YouTube 上</p><p>Polymer 3.0 在 20 天前刚刚发布，正好 B 站播放器近期需要重构所有 UI 组件，所以做了这样的一个调研，下文所有 demo 托管在 <a href="https://github.com/DIYgod/polymer-demos" target="_blank" rel="noopener">polymer-demos</a>，这些小 demo 只作为一些简单体验，想了解 Polymer 的完整功能建议阅读<a href="https://www.polymer-project.org/3.0/docs/devguide/feature-overview" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>目前使用 Web Components 的最大阻碍就是浏览器支持程度低，且 Polyfills 体积相对偏大（90+kb）</p><p>目前只有新版 Chrome Opera 和 Safari 可以提供完整的原生支持，具体支持情况可以参考 <a href="https://caniuse.com/#search=web%20components" target="_blank" rel="noopener">caniuse.com</a>，使用 <a href="https://github.com/webcomponents/webcomponentsjs" target="_blank" rel="noopener">Polyfills</a> 后可以支持到 Edge IE11+ Firefox Safari9+</p><p>Polyfills 有三个主要的文件：</p><ul><li><code>webcomponents-bundle.js</code>: 包含了所有 polyfills</li><li><code>webcomponents-loader.js</code>: 可以检测浏览器支持情况，然后去加载对应的 polyfills，对有原生支持的浏览器可以减少不必要的浪费</li><li><code>custom-elements-es5-adapter.js</code>: 注册 Custom Elements 时需要使用 ES6 语法，所以当浏览器不支持 ES6 时需要做额外的处理，再引用这个文件就好了</li></ul><p>总的来说兼容最多浏览器的最佳实践是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"webcompoments-loader.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"custom-elements-es5-adapter.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>webcompoments-loader.js</code> 必须单独引用，<code>custom-elements-es5-adapter.js</code> 可以跟 <code>polymer</code> 和你的代码用 Webpack 合到一起，但注意 <code>custom-elements-es5-adapter.js</code> 不要做额外的编译，其他代码用 babel 编译成 ES5，完整实践可以参考 <a href="https://github.com/DIYgod/polymer-demos" target="_blank" rel="noopener">polymer-demos</a></p><h2 id="Custom-elements"><a href="#Custom-elements" class="headerlink" title="Custom elements"></a>Custom elements</h2><p>下面尝试定义一个最简单的自定义元素，从 <code>PolymerElement</code> 继承一个类，然后传给 <code>window.customElements.define</code></p><p><strong>效果</strong></p><demo-custom-elements></demo-custom-elements><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-custom-elements</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-custom-elements</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoCustomElements</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.textContent = <span class="string">`I'm a custom element.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-custom-elements'</span>, DemoCustomElements);</span><br></pre></td></tr></table></figure><h2 id="Shadow-dom"><a href="#Shadow-dom" class="headerlink" title="Shadow dom"></a>Shadow dom</h2><p>Shadow dom 是一个隐藏、独立的 DOM，它的 HTML CSS 和行为与常规的 DOM 树分离，这样不同的功能不会混在一起，内外的 CSS 也互不影响</p><p>Shadow dom 不是一个新事物，一直以来，浏览器用它来封装一个元素的内部结构。以 <code>&lt;video&gt;</code> 元素为例。你所能看到的只是一个 <code>&lt;video&gt;</code> 标签，实际上，在它的 Shadow dom 中包含一系列的按钮和控制器</p><p>下面例子中，Shadow dom 里的 p 标签定义了 CSS 属性 <code>color</code>，它不会泄露到外部</p><p><strong>效果</strong></p><style>html{--my-background:#eee}</style><demo-shadow-dom></demo-shadow-dom><p>I am outside of demo-shadow-dom. Because of encapsulation, demo-shadow-dom's styles won't leak to me.</p><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">--my-background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">demo-shadow-dom</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-shadow-dom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am outside of demo-shadow-dom. Because of encapsulation, demo-shadow-dom's styles won't leak to me.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoShadowDom</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> get template () &#123;</span><br><span class="line">        <span class="keyword">return</span> html<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;style&gt;</span></span><br><span class="line"><span class="string">                p &#123;</span></span><br><span class="line"><span class="string">                    color: #F5712C;</span></span><br><span class="line"><span class="string">                    background-color: var(--my-background);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &lt;/style&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;I'm a DOM element.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;This is my shadow DOM!&lt;/p&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-shadow-dom'</span>, DemoShadowDom);</span><br></pre></td></tr></table></figure><h2 id="HTML-templates"><a href="#HTML-templates" class="headerlink" title="HTML templates"></a>HTML templates</h2><p>使用 <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 组成 shadow DOM</p><p><strong>效果</strong></p><demo-html-template>    <p>I'm a custom slot.</p></demo-html-template><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-html-template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm a custom slot.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">demo-html-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'@polymer/polymer/lib/elements/dom-repeat.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DemoShadowDom &#125; <span class="keyword">from</span> <span class="string">'./demo-shadow-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHTMLTemplate</span> <span class="keyword">extends</span> <span class="title">DemoShadowDom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.employees = [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'Blog'</span>,</span><br><span class="line">                link: <span class="string">'https://diygod.me'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'GitHub'</span>,</span><br><span class="line">                link: <span class="string">'https://github.com/DIYgod'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> get template () &#123;</span><br><span class="line">        <span class="keyword">return</span> html<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;strong&gt;Template:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            &lt;template is="dom-repeat" items="&#123;&#123;employees&#125;&#125;"&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&lt;a href="&#123;&#123;item.link&#125;&#125;"&gt;&#123;&#123;item.name&#125;&#125;&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/template&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;Slot:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;Super template:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;<span class="keyword">super</span>.template&#125;</span></span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-html-template'</span>, DemoHTMLTemplate);</span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>支持双向的数据绑定，你可以尝试编辑下面的输入框，或者直接在控制台修改属性 <code>document.querySelector(&#39;demo-data&#39;).owner1 = &#39;DIYgay&#39;</code>，属性改变会即时反映到 DOM 里</p><p><strong>效果</strong></p><demo-data owner1="DIYgod1"></demo-data><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-data</span> <span class="attr">owner1</span>=<span class="string">"DIYgod1"</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-data</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'@polymer/iron-input'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.owner3 = <span class="string">'DIYgod3'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> get properties () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            owner1: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                value: <span class="string">'DIYgod'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            owner2: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                value: <span class="string">'DIYgod2'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> get template () &#123;</span><br><span class="line">        <span class="keyword">return</span> html<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;p&gt;This is &lt;b&gt;[[owner1]]&lt;/b&gt;'s element.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;This is &lt;b&gt;[[owner2]]&lt;/b&gt;'s element.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;This is &lt;b&gt;&#123;&#123;owner3&#125;&#125;&lt;/b&gt;'s element.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;iron-input bind-value="&#123;&#123;owner1&#125;&#125;"&gt;</span></span><br><span class="line"><span class="string">                &lt;input is="iron-input" placeholder="Your name here..."&gt;</span></span><br><span class="line"><span class="string">            &lt;/iron-input&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-data'</span>, DemoData);</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>下面我们来给我们的自定义元素定义一个名为 <code>diygod</code> 的事件，绑定事件回调的方法跟正常事件一样</p><p><strong>效果</strong></p><demo-events></demo-events><script>document.querySelector("demo-events").addEventListener("diygod",function(e){alert(e.detail.msg)})</script><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-events</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-events</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'demo-events'</span>).addEventListener(<span class="string">'diygod'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(e.detail.msg);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvents</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> get template () &#123;</span><br><span class="line">        <span class="keyword">return</span> html<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;button on-click="handleClick"&gt;Kick Me&lt;/button&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick(e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(<span class="string">'diygod'</span>, &#123;</span><br><span class="line">            detail: &#123;</span><br><span class="line">                msg: <span class="string">'diygod event fired'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-events'</span>, DemoEvents);</span><br></pre></td></tr></table></figure><p><scirpt src="https://cdn.jsdelivr.net/gh/DIYgod/polymer-demos@0.0.1/dist/webcomponents-loader.js"></scirpt></p><script src="https://cdn.jsdelivr.net/gh/DIYgod/polymer-demos@0.0.1/dist/polymer-demos.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为开发者，我们都知道组件化、标准化和代码复用的重要性，前端也从未停止过对前端组件化的尝试，产生了各式各样的组件化技术，从 Vue React 等前端框架，到 webpack 这样的全站打包工具&lt;/p&gt;&lt;p&gt;但前端一直缺乏这样一个模块化标准和浏览器级别的原生组件化方案&lt;/p&gt;&lt;p&gt;Web Components 是 WHATWG 和 W3C 正在尝试的 Web 组件化方案，为组件化的前端开发提供浏览器级别的支持。它由四项主要技术组成：Shadow DOM、Custom Elements、HTML Import、HTML Template&lt;/p&gt;&lt;p&gt;Polymer 项目是 Google 的基于 Web Components 机制的框架，定位于简单的 Polyfill 和易用性封装，包括数据绑定，模板声明，事件系统等。Google 在去年就已经将其应用到了 YouTube 上&lt;/p&gt;&lt;p&gt;Polymer 3.0 在 20 天前刚刚发布，正好 B 站播放器近期需要重构所有 UI 组件，所以做了这样的一个调研，下文所有 demo 托管在 &lt;a href=&quot;https://github.com/DIYgod/polymer-demos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;polymer-demos&lt;/a&gt;，这些小 demo 只作为一些简单体验，想了解 Polymer 的完整功能建议阅读&lt;a href=&quot;https://www.polymer-project.org/3.0/docs/devguide/feature-overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>技术宅也要谈恋爱之早安晚安自动化</title>
    <link href="https://diygod.me/goodnight/"/>
    <id>https://diygod.me/goodnight/</id>
    <published>2018-04-25T01:45:03.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>上一集：<a href="https://diygod.me/2920/">技术宅也要谈恋爱之女朋友的微博情绪监控</a></p><p>发小一直很喜欢说早安晚安（当然是我说给她），但我经常会忘记，最近灵机一动，想出来这样一个科学高效方便快捷稳定地说早安晚安的办法：</p><p>把微信挂在服务器上，每天固定时间，自动执行发送早晚安文本消息的命令！</p><p>代码很简单，放在了 <a href="https://github.com/DIYgod/GoodNight" target="_blank" rel="noopener">GitHub</a> 上，具体效果是每天早上 9 点半发一个 “早安”，然后晚上 12 点再发一个 “晚安”。</p><p>太好了！以后再也不会忘记说早安晚安了！开心！</p><p><img src="/images/havefun.jpg" alt=""></p><p>脚本已经部署到服务器上了，明天早上给发小一个惊喜！</p><p>实际使用的效果明天会更新到下面（肯定没问题，稳得很！）：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一集：&lt;a href=&quot;https://diygod.me/2920/&quot;&gt;技术宅也要谈恋爱之女朋友的微博情绪监控&lt;/a&gt;&lt;/p&gt;&lt;p&gt;发小一直很喜欢说早安晚安（当然是我说给她），但我经常会忘记，最近灵机一动，想出来这样一个科学高效方便快捷稳定地说早安晚安的办法：&lt;/p&gt;&lt;
      
    
    </summary>
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>RSSHub - 使用 RSS 连接全世界</title>
    <link href="https://diygod.me/rsshub/"/>
    <id>https://diygod.me/rsshub/</id>
    <published>2018-04-13T00:53:01.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">项目地址</a></strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源</p><p>当前支持列表：</p><ul><li>bilibili<ul><li>番剧</li><li>UP 主投稿</li><li>UP 主动态</li><li>UP 主收藏夹</li><li>分区视频</li></ul></li><li>微博<ul><li>博主</li></ul></li><li>网易云音乐<ul><li>歌单</li></ul></li><li>掘金<ul><li>分类</li></ul></li><li>自如<ul><li>房源</li></ul></li><li>快递</li></ul><a id="more"></a><h2 id="参与我们"><a href="#参与我们" class="headerlink" title="参与我们"></a>参与我们</h2><p>如果有任何想法或需求，可以在 <a href="https://github.com/DIYgod/RSSHub/issues" target="_blank" rel="noopener">issue</a> 中告诉我们，同时我们欢迎各种 pull requests</p><p>可以通过以下途径参与讨论：</p><ul><li><a href="https://t.me/rsshub" target="_blank" rel="noopener">Telegram 群</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/DIYgod/RSSHub&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源&lt;/p&gt;&lt;p&gt;当前支持列表：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;bilibili&lt;ul&gt;&lt;li&gt;番剧&lt;/li&gt;&lt;li&gt;UP 主投稿&lt;/li&gt;&lt;li&gt;UP 主动态&lt;/li&gt;&lt;li&gt;UP 主收藏夹&lt;/li&gt;&lt;li&gt;分区视频&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;微博&lt;ul&gt;&lt;li&gt;博主&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;网易云音乐&lt;ul&gt;&lt;li&gt;歌单&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;掘金&lt;ul&gt;&lt;li&gt;分类&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自如&lt;ul&gt;&lt;li&gt;房源&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;快递&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2018 暴走 yu 人节参展日记</title>
    <link href="https://diygod.me/2018-bao-zou-yu-ren-jie/"/>
    <id>https://diygod.me/2018-bao-zou-yu-ren-jie/</id>
    <published>2018-04-02T00:23:24.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>暴走 yu 人节是暴走漫画首届互动娱乐展会，作为暴走粉当然不能错过，很早就买了票。</p><p>总体感觉还是很棒的，嘉宾阵容强大，互动很多（还可以跟王尼玛一起上厕所），诚意满满，但不足也很明显，暴走 yu 人节主要内容集中在主舞台的节目表演，但上海新国际博览中心的现场座位远远不够，感觉还是更适合在类似 BML 的举办地梅赛德斯-奔驰文化中心这种地方举办。</p><a id="more"></a><p><img src="/images/bz1.jpg" alt=""></p><p>上午去得比较晚，逛了下厂商展台，没看节目，中午暴走家族在主舞台互动了一波，然后就是下午的节目。</p><h3 id="醋醋"><a href="#醋醋" class="headerlink" title="醋醋"></a>醋醋</h3><p>超级可爱，被圈粉了</p><div class="dplayer" id="dplayer-bz-1"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-1"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/1.mp4"},danmaku:{id:"diygodme-bz-1",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-2"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-2"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/2.mp4"},danmaku:{id:"diygodme-bz-2",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><h3 id="金馆长"><a href="#金馆长" class="headerlink" title="金馆长"></a>金馆长</h3><p>哦哈哈哈哈哈哈</p><div class="dplayer" id="dplayer-bz-3"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-3"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/3.mp4"},danmaku:{id:"diygodme-bz-3",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-4"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-4"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/4.mp4"},danmaku:{id:"diygodme-bz-4",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><h3 id="暴走家族"><a href="#暴走家族" class="headerlink" title="暴走家族"></a>暴走家族</h3><p>全阵容，激动</p><div class="dplayer" id="dplayer-bz-5"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-5"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/5.mp4"},danmaku:{id:"diygodme-bz-5",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><h3 id="咬人猫-赤九玖-有咩酱"><a href="#咬人猫-赤九玖-有咩酱" class="headerlink" title="咬人猫 赤九玖 有咩酱"></a>咬人猫 赤九玖 有咩酱</h3><p>还说什么，舔爆就行了</p><div class="dplayer" id="dplayer-bz-6"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-6"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/6.mp4"},danmaku:{id:"diygodme-bz-6",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-7"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-7"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/7.mp4"},danmaku:{id:"diygodme-bz-7",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-8"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer-bz-8"),preload:"metadata",video:{url:"https://dplayer.b0.upaiyun.com/bz/8.mp4"},danmaku:{id:"diygodme-bz-8",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script><h3 id="山下智博"><a href="#山下智博" class="headerlink" title="山下智博"></a>山下智博</h3><p>签售会，签名 合照 get√</p><p><img src="/images/bz2.jpg" alt=""></p><p>最后离场的时候还在厕所里遇到了王尼玛，上厕所也带着头套，身边有个工作人员，很激动，呆住了好几秒…发现王尼玛比我矮好多，应该在170以下😂</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暴走 yu 人节是暴走漫画首届互动娱乐展会，作为暴走粉当然不能错过，很早就买了票。&lt;/p&gt;&lt;p&gt;总体感觉还是很棒的，嘉宾阵容强大，互动很多（还可以跟王尼玛一起上厕所），诚意满满，但不足也很明显，暴走 yu 人节主要内容集中在主舞台的节目表演，但上海新国际博览中心的现场座位远远不够，感觉还是更适合在类似 BML 的举办地梅赛德斯-奔驰文化中心这种地方举办。&lt;/p&gt;
    
    </summary>
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>关于开源项目赞助这件事</title>
    <link href="https://diygod.me/open-source-project-donation/"/>
    <id>https://diygod.me/open-source-project-donation/</id>
    <published>2018-03-05T23:21:21.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-open-source"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=536622447",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-open-source"),showlrc:3,theme:"#ad7a86",mode:"random",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>&nbsp;<br>相信没人做开源项目是为了赚钱，因为它还不如去天桥贴膜赚得快。</p><p>但即使没有这种想法，维护一个开源项目也会遇到一些很头疼的现实问题，比如服务器和 CDN 的开销。以 DPlayer 为例，弹幕接口服务器每年需要花费 2000 多块，文档里的视频 CDN 费用每年也需要花费 1500 多块，并且随着用户增多这些花费只增不减。</p><p>虽然一直在 README 的显著位置挂着赞助方式，但也没抱太大希望，毕竟 DPlayer 用户几乎都是国人，能遇到一个可以描述清楚自己问题的用户就已经很不容易了，结果也不出我所料，一年里零星收到的赞助只不过是杯水车薪。说实话，让我自己承担这些花费我是不乐意的，再加上用户大多是盗版站和小黄站，这曾一度让我产生了弃坑的想法。<a id="more"></a></p><p>后面的事情很多朋友都知道了，<a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>和<a href="https://pear.hk/" target="_blank" rel="noopener">梨享计算</a>先后赞助了 DPlayer，又拍云赞助了 DPlayer 的全部 CDN 费用，梨享计算则每月提供一笔数量可观的金钱赞助。</p><p>一般来说，如果一个团体或企业将开源项目用在商业产品中，那么赞助开源项目有直接的商业上的益处：可以让产品所依赖的框架保持健康并得到积极的维护。不同的是又拍云并没有用到 DPlayer，短期内也不会有任何直接的商业回报，可能更多的是一种情怀，又拍云作为一家商业公司，其不求回报的慷慨赞助是我尤其感动的。</p><p>这篇文章当然不是为了号召大家进行赞助或去天桥贴膜，目前两家公司的赞助已经足够人力以外的日常开销，除了赞助，贡献代码、提一个描述清楚的 bug 或意见、一句鼓励、或者仅仅是使用我的开源项目都同样可以让我很开心，这些都是让我继续花时间做开源的动力。</p><p>以下硬广：</p><blockquote><p><a href="https://pear.hk/" target="_blank" rel="noopener">梨享计算</a>是一家雾计算技术研发商，专注于为用户提供 IaaS 架构、PaaS 平台、SaaS 软件服务。Pear Fog 不仅是跨越网络中心到边缘的资源池，也是新型的 P2P 系统。其中 Fog CDN 在以透明且 Web 友好的方式帮视频厂商降低内容分发成本、提高质量。</p><p><a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>是国内知名企业级云服务商，致力于为客户提供一站式的在线业务加速服务，为客户提供对象存储、HTTPS／SSL 证书、多媒体处理（WebP 自适应、H.265 自适应等）、影像识别、文字识别、短视频 SDK、直播 SDK、连麦 SDK 等服务。又拍云拥有 6 个数据处理中心、300 多个国内CDN节点、15 个海外CDN节点、5000 台服务器、5TB 保有带宽，日均请求超过 1000 亿次。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;aplayer&quot; id=&quot;aplayer-open-source&quot;&gt;&lt;/div&gt;&lt;script&gt;$(function(){$.ajax({url:&quot;https://api.i-meto.com/meting/api?server=netease&amp;type=song&amp;id=536622447&quot;,success:function(e){var a=new APlayer({element:document.getElementById(&quot;aplayer-open-source&quot;),showlrc:3,theme:&quot;#ad7a86&quot;,mode:&quot;random&quot;,music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})&lt;/script&gt;&lt;p&gt;&amp;nbsp;&lt;br&gt;相信没人做开源项目是为了赚钱，因为它还不如去天桥贴膜赚得快。&lt;/p&gt;&lt;p&gt;但即使没有这种想法，维护一个开源项目也会遇到一些很头疼的现实问题，比如服务器和 CDN 的开销。以 DPlayer 为例，弹幕接口服务器每年需要花费 2000 多块，文档里的视频 CDN 费用每年也需要花费 1500 多块，并且随着用户增多这些花费只增不减。&lt;/p&gt;&lt;p&gt;虽然一直在 README 的显著位置挂着赞助方式，但也没抱太大希望，毕竟 DPlayer 用户几乎都是国人，能遇到一个可以描述清楚自己问题的用户就已经很不容易了，结果也不出我所料，一年里零星收到的赞助只不过是杯水车薪。说实话，让我自己承担这些花费我是不乐意的，再加上用户大多是盗版站和小黄站，这曾一度让我产生了弃坑的想法。
    
    </summary>
    
      <category term="闲言语" scheme="https://diygod.me/categories/%E9%97%B2%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>DARLING in the FRANXX 博客样式</title>
    <link href="https://diygod.me/darling-in-the-franxx-style/"/>
    <id>https://diygod.me/darling-in-the-franxx-style/</id>
    <published>2018-02-05T00:08:53.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-darling"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=531051597",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-darling"),showlrc:3,theme:"#ad7a86",mode:"random",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>&nbsp;<br><strong>点击<a href="javascript:;" id="darling-trigger" target="_blank" rel="noopener">这里</a>切换样式</strong><br><script>$("#darling-trigger").click(function(){var a=$("body");a.hasClass("theme-darling")?a.removeClass("theme-darling"):a.addClass("theme-darling")})</script></p><p>救命啊，我被撩到了！<br>没错，我就是她的 Darling！<br>天哪，世界上怎么会有那么可爱的女孩子！<br>我现在只想看 DITF 第五集别的什么都不想干.jpg<br><img src="https://diygod.me/images/header-darling.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;aplayer&quot; id=&quot;aplayer-darling&quot;&gt;&lt;/div&gt;&lt;script&gt;$(function(){$.ajax({url:&quot;https://api.i-meto.com/meting/api?server=netease&amp;type=song
      
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Web Workers 初体验</title>
    <link href="https://diygod.me/web-workers/"/>
    <id>https://diygod.me/web-workers/</id>
    <published>2018-01-30T22:24:15.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/av18682336/" target="_blank" rel="noopener">这个视频</a>有 15+MB 的 BAS 弹幕脚本需要解析，这会导致页面卡死 7 秒左右的时间，期间 UI 被冻结，体验很糟糕，如果使用 Web Workers 进行优化，把解析放入 Web Workers 执行，就可以避免 UI 线程阻塞造成的页面冻结。</p><a id="more"></a><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>使用 parse 来模拟解析函数</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(parse(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p>此时页面会卡死 1s，然后输出一个 ‘DIYgod’。</p><h2 id="使用-Web-Workers"><a href="#使用-Web-Workers" class="headerlink" title="使用 Web Workers"></a>使用 Web Workers</h2><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span><br><span class="line">wk.postMessage(<span class="number">1000</span>);</span><br><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    postMessage(parse(e.data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 Web Workers 的一个最基础用法，index.js 把 1000 传给 worker.js，worker.js 在后台解析 1000 ms，再把结果 ‘DIYgod’ 传回 index.js，这样解析就不会再占用 js 主线程，避免了页面卡死。</p><h2 id="内嵌-Worker"><a href="#内嵌-Worker" class="headerlink" title="内嵌 Worker"></a>内嵌 Worker</h2><p>上一步我们加载了两个 js 文件，index.js 和 worker.js，在 HTML 里引用 index.js，然后 index.js 会加载 worker.js，那么不想创建单独的 Worker 文件怎么办呢？</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workerBlob = <span class="keyword">new</span> Blob([<span class="string">`function parse (time) &#123;</span></span><br><span class="line"><span class="string">    const start = new Date();</span></span><br><span class="line"><span class="string">    while(new Date() - start &lt; time) &#123;&#125;</span></span><br><span class="line"><span class="string">    return 'DIYgod';</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">onmessage = function (e) &#123;</span></span><br><span class="line"><span class="string">    postMessage(parse(e.data));</span></span><br><span class="line"><span class="string">&#125;`</span>], &#123; <span class="attr">type</span>: <span class="string">'application/javascript'</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> workerURL = URL.createObjectURL(workerBlob);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> Worker(workerURL);</span><br><span class="line">wk.postMessage(<span class="number">1000</span>);</span><br><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>URL.createObjectURL(blob) 会创建一个 DOMString，它包含一个表示 blob 的 URL。</p><p>打开控制台的 Network 标签页，你会看到浏览器加载了一个形如 <code>blob:http://example.com/16215a1e-21d4-450c-b441-070e1981b69d</code> 的奇怪链接的 js 文件，这个 js 文件的内容正是我们传给 workerBlob 的字符串内容。</p><p>这个 URL 是唯一的，且它的生命周期和创建它的窗口中的 document 绑定，只要页面存在，该网址就会一直有效。</p><h2 id="使用-webpack-worker-loader"><a href="#使用-webpack-worker-loader" class="headerlink" title="使用 webpack worker-loader"></a>使用 webpack worker-loader</h2><p>上一步中我们把 js 代码放在了字符串里，它不能拆分模块，也不利于后期维护，如果项目正在使用 webpack，安装 <a href="https://github.com/webpack-contrib/worker-loader" target="_blank" rel="noopener">worker-loader</a> 可以解决这个问题。</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WK <span class="keyword">from</span> <span class="string">'worker-loader?inline=true&amp;fallback=false!./worker.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> WK();</span><br><span class="line">wk.postMessage(<span class="number">1000</span>);</span><br><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'./parse.js'</span>;</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span><br><span class="line">    self.postMessage(Parse(e.data));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>parse.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parse</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parse;</span><br></pre></td></tr></table></figure><p>只需要使用 worker-loader 引用 worker.js 模块，剩下的 worker-loader 会帮我们自动处理，最后编译的结果类似我们上一步的代码。</p><p>对比不使用 Web Workers 时：</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'./parse.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Parse(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p><strong>parse.js（不变）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parse</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parse;</span><br></pre></td></tr></table></figure><p>这样不用修改原有的解析模块，非侵入式，只需要加个 worker.js 中转模块，再改下调用方法即可，维护起来也很方便。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>如果我把一个计算放入 4 个 Worker，那么这个计算会快 4 倍？</p><p>不，它不仅不会快 4 倍，而且会变得更慢。</p><p>Web Workers 不是为了缩短计算时间，而是为了避免 UI 线程冻结。创建线程、线程调度、传输数据等行为会导致计算变得比单线程稍微更慢一点。</p><p>我记录了开头那个视频在不同 Worker 数量下解析 100 条弹幕的时间，7 次记录取平均值：</p><table><thead><tr><th>Worker 数量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>10</th></tr></thead><tbody><tr><td>平均时间(ms)</td><td>6085</td><td>8216</td><td>6310</td><td>6388</td><td>6483</td><td>6317</td><td>6475</td><td>7233</td></tr></tbody></table><p>不使用 Worker 的解析速度最快，1 个 Worker 的速度比其他明显更慢，2 3 4 5 6 个 Worker 速度没有明显差异，但 Worker 数量一直增加速度又会逐渐变慢。</p><p>另外又测试了弹幕比较少的视频，结果是 1 2 3 4 5 个 Worker 的速度都差不多。</p><p>最后不靠谱地决定使用 2 个 Worker 进行解析。</p><p>优化结果妙不可言，不需要等待解析完成才能进行其他操作，也可以一边播放视频一边解析，区别只是播放到没解析好的弹幕不会显示，解析完成才会显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av18682336/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个视频&lt;/a&gt;有 15+MB 的 BAS 弹幕脚本需要解析，这会导致页面卡死 7 秒左右的时间，期间 UI 被冻结，体验很糟糕，如果使用 Web Workers 进行优化，把解析放入 Web Workers 执行，就可以避免 UI 线程阻塞造成的页面冻结。&lt;/p&gt;
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>NetEaseCloudMusic2RSS — 使用RSS订阅她喜欢的网易云音乐</title>
    <link href="https://diygod.me/neteasecloudmusic2rss/"/>
    <id>https://diygod.me/neteasecloudmusic2rss/</id>
    <published>2018-01-29T02:23:01.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p>音乐，人类生活中永恒的主题。音乐可以很大程度上体现一个人的喜好、品味，更是最有力量的情感传输器。</p><p>现在快使用RSS订阅我喜欢的网易云音乐吧：<a href="https://api.prprpr.me/necm2rss/playlist/35798529" target="_blank" rel="noopener">https://api.prprpr.me/necm2rss/playlist/35798529</a>，跟网红 DIYgod 听一样的音乐！</p><p>项目名叫 NetEaseCloudMusic2RSS，开源在 <a href="https://github.com/DIYgod/NetEaseCloudMusic2RSS" target="_blank" rel="noopener">GitHub</a>。</p><p>另外可以使用相关项目 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 订阅喜欢的微博博主，<a href="https://github.com/DIYgod/bilibili2RSS" target="_blank" rel="noopener">bilibili2RSS</a> 订阅B站UP主、收藏夹、投币视频、番剧、分区等。</p><p>RSS 干杯！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;音乐，人类生活中永恒的主题。音乐可以很大程度上体现一个人的喜好、品味，更是最有力量的情感传输器。&lt;/p&gt;&lt;p&gt;现在快使用RSS订阅我喜欢的网易云音乐吧：&lt;a href=&quot;https://api.prprpr.me/necm2rss/playlist/35798529&quot; ta
      
    
    </summary>
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>BAS 高级弹幕</title>
    <link href="https://diygod.me/bas/"/>
    <id>https://diygod.me/bas/</id>
    <published>2018-01-25T23:50:26.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>如果你好奇 B 站的工作有不有趣，或者我来 B 站之后都在做什么，那么这篇文章或许可以解答你的部分疑问。</p><p>来 B 站后，除了负责 HTML5 播放器的一些模块、重构和日常维护以外，BAS 高级弹幕算是我半年来负责开发的最大一个项目了。</p><p>本文整理自今天在公司的超极电磁波分享（据说我还是有史以来年龄最小的讲师(=・ω・=)，也算是对这个项目的一个阶段性总结。</p><a id="more"></a><h2 id="什么是-BAS-弹幕"><a href="#什么是-BAS-弹幕" class="headerlink" title="什么是 BAS 弹幕"></a>什么是 BAS 弹幕</h2><p>BAS，全称 Bilibili Animation Script，是新一代 bilibili 高级弹幕脚本语言，是一种用来描述高级弹幕样式、交互和动画的文本。</p><p>BAS 弹幕是用 BAS 描述的高级弹幕，由元素和动画组成，元素分为文本对象、交互按钮、path 对象，动画分为简单动画、串联动画、并联动画。</p><p>BAS 弹幕主要面向字幕君等高端玩家，可以用于字幕、特效、交互应用、游戏、纯弹幕作品等场景。</p><p>目前 Web 端已经上线，移动端也基本开发完成，期望在明年的活动或拜年祭中能够用到。</p><p>我们做了几个视频来直观展示 BAS 弹幕：</p><p>第一个是毛酱大佬做的弹幕 PV：<a href="https://www.bilibili.com/video/av257649/" target="_blank" rel="noopener">https://www.bilibili.com/video/av257649/</a></p><p>第二个是弹幕实现的烂苹果：<a href="https://www.bilibili.com/video/av18682336/" target="_blank" rel="noopener">https://www.bilibili.com/video/av18682336/</a></p><p>第三个是交互按钮的演示：<a href="https://www.bilibili.com/video/av16558829/index_3.html#page=3" target="_blank" rel="noopener">https://www.bilibili.com/video/av16558829/index_3.html#page=3</a> ，另外像哔哩哔哩排行榜周刊这种也是很好的应用场景</p><p>字幕应用方面可以很容易实现一个字幕文件转 BAS 之类的工具，今后会继续做这样的事情。</p><h3 id="几种高级弹幕比较"><a href="#几种高级弹幕比较" class="headerlink" title="几种高级弹幕比较"></a>几种高级弹幕比较</h3><h4 id="mode7"><a href="#mode7" class="headerlink" title="mode7"></a>mode7</h4><p>弹幕通过界面设置，不需要编写代码，使用简单但功能比较局限。</p><p><img src="https://diygod.b0.upaiyun.com/bas1.jpg" alt=""></p><h4 id="mode8"><a href="#mode8" class="headerlink" title="mode8"></a>mode8</h4><p>即代码弹幕，功能非常强大但需要编写代码，使用复杂、安全性较差，而且只支持 Flash 平台。</p><p><img src="https://diygod.b0.upaiyun.com/bas2.jpg" alt=""></p><h4 id="mode9"><a href="#mode9" class="headerlink" title="mode9"></a>mode9</h4><p>即 BAS 弹幕，是 mode 7 和 mode 8 的折中方案。</p><p>跟 mode 7 相比，mode 9 需要编写脚本，使用稍复杂，但支持交互、图形和更复杂的动画，功能要强大得多。</p><p>跟 mode 8 相比，mode 9 简化了语法，改用声明式，使用更简单；更安全，播放器解析实现，不合法脚本不会放行，程序可控，而不是直接操作弹幕；可以跨平台。</p><p><img src="https://diygod.b0.upaiyun.com/bas3.jpg" alt=""></p><h2 id="使用-BAS-弹幕"><a href="#使用-BAS-弹幕" class="headerlink" title="使用 BAS 弹幕"></a>使用 BAS 弹幕</h2><h3 id="发送权限"><a href="#发送权限" class="headerlink" title="发送权限"></a>发送权限</h3><p>首先权限上对 BAS 弹幕的发送权限有着严格的限制，设计上一般用户需要先用硬币购买，然后等待 UP 主确认之后才可以使用，字幕君等有特殊权限的用户才可以直接使用，但目前只开放给字幕君使用，字幕君使用并完善之后再考虑扩大使用场景。</p><table><thead><tr><th></th><th>硬币购买</th><th>UP 主确认</th></tr></thead><tbody><tr><td>一般会员</td><td>√</td><td>√</td></tr><tr><td>UP 主</td><td>√</td><td>×</td></tr><tr><td>VIP</td><td>×</td><td>√</td></tr><tr><td>字幕君/管理员</td><td>×</td><td>×</td></tr></tbody></table><h3 id="发送入口"><a href="#发送入口" class="headerlink" title="发送入口"></a>发送入口</h3><ol><li><img src="https://diygod.b0.upaiyun.com/bas4.jpg" alt=""></li><li><img src="https://diygod.b0.upaiyun.com/bas5.jpg" alt=""></li></ol><p>注意没有发送权限时入口是隐藏的，这时候可以在<a href="https://bilibili.github.io/bas/#/playground" target="_blank" rel="noopener">试验室</a>中进行尝试。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>下面我们来尝试编写一些简单的脚本，BAS 脚本非常简单，它是一种声明式描述性的脚本，语法易用，保证了对象块和操作块的独立性。</p><p>尝试 BAS 弹幕最简单的方法是使用<a href="https://bilibili.github.io/bas" target="_blank" rel="noopener">文档</a>上的例子和试验室，你可以在浏览器新标签页中打开它，跟着例子尝试一些基础用法。</p><p>以文本对象为例，一个简单的带渐隐动画的文本对象是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def text demo &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set demo &#123;</span><br><span class="line">    alpha = 0</span><br><span class="line">&#125; 5s</span><br></pre></td></tr></table></figure><p>这样我们就成功创建了一条渐隐的 BAS 弹幕，看起来很简单，但是 js 在背后做了大量工作，js 会先把 BAS 脚本解析成 js 可识别的对象，应用上默认属性，再把它渲染到播放器里，同时开始动画，这时候就可以在播放器左上角看到一个渐隐的白色文本。</p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>定位也非常简单，BAS 弹幕的定位由弹幕锚点（anchorX anchorY）和舞台位置（x y）共同决定。锚点是弹幕的中心点，(0, 0)为弹幕的左上角，(1, 1)为弹幕的右下角。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">def text tl &#123;</span><br><span class="line">    content = &quot;左上&quot;</span><br><span class="line">    x = 0</span><br><span class="line">    y = 0</span><br><span class="line">    anchorX = 0</span><br><span class="line">    anchorY = 0</span><br><span class="line">&#125;</span><br><span class="line">def text tr &#123;</span><br><span class="line">    content = &quot;右上&quot;</span><br><span class="line">    x = 100%</span><br><span class="line">    y = 0</span><br><span class="line">    anchorX = 1</span><br><span class="line">    anchorY = 0</span><br><span class="line">&#125;</span><br><span class="line">def text bl &#123;</span><br><span class="line">    content = &quot;左下&quot;</span><br><span class="line">    x = 0</span><br><span class="line">    y = 100%</span><br><span class="line">    anchorX = 0</span><br><span class="line">    anchorY = 1</span><br><span class="line">&#125;</span><br><span class="line">def text br &#123;</span><br><span class="line">    content = &quot;右下&quot;</span><br><span class="line">    x = 100%</span><br><span class="line">    y = 100%</span><br><span class="line">    anchorX = 1</span><br><span class="line">    anchorY = 1</span><br><span class="line">&#125;</span><br><span class="line">def text c &#123;</span><br><span class="line">    content = &quot;中心&quot;</span><br><span class="line">    x = 50%</span><br><span class="line">    y = 50%</span><br><span class="line">    anchorX = 0.5</span><br><span class="line">    anchorY = 0.5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="弹幕舞台"><a href="#弹幕舞台" class="headerlink" title="弹幕舞台"></a>弹幕舞台</h4><p>弹幕舞台是弹幕的绘制范围，弹幕舞台默认为视频的真实区域，此外文本对象可以通过 parent 属性把其他文本对象指定为父级元素，以父级元素作为舞台进行绘制，父级元素会影响子级元素的定位、缩放等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">    content = &quot;□&quot;</span><br><span class="line">    fontSize = 40%</span><br><span class="line">    x = 0</span><br><span class="line">    y = 0</span><br><span class="line">    color = 0xffff00</span><br><span class="line">&#125;</span><br><span class="line">def text b &#123;</span><br><span class="line">    parent = &quot;a&quot;</span><br><span class="line">    content = &quot;□&quot;</span><br><span class="line">    fontSize = 20%</span><br><span class="line">    x = 0</span><br><span class="line">    y = 0</span><br><span class="line">    color = 0xff00ff</span><br><span class="line">&#125;</span><br><span class="line">set a &#123;</span><br><span class="line">    x = 50%</span><br><span class="line">    y = 0</span><br><span class="line">&#125; 2s</span><br><span class="line">then set a &#123;&#125; 3s</span><br><span class="line">set b &#123;</span><br><span class="line">    y = 50%</span><br><span class="line">&#125; 3s</span><br><span class="line">then set b &#123;&#125; 3s</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>生命周期是 BAS 的另一个重要概念，生命周期是弹幕存活的时间，没有指定 duration 属性时，元素生命周期为动画总时间，没有动画时默认为4s。生命周期结束后元素就会在舞台中被清除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">    duration = 10s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set a &#123;&#125; 10s</span><br></pre></td></tr></table></figure><h4 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h4><p>位置和字号为百分比值时可以根据舞台大小自适应，可以实现各个平台、不同播放器大小时弹幕的一致性效果，使弹幕在不同情况下相对于视频的位置和大小是固定的，位置坐标为当前舞台宽高 <em> 百分比值 px，字号为当前舞台宽度 </em> 百分比值 px。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def text c &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">    x = 50%</span><br><span class="line">    y = 50%</span><br><span class="line">    anchorX = 0.5</span><br><span class="line">    anchorY = 0.5</span><br><span class="line">    fontSize = 5%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候改变播放器大小，弹幕大小也会跟随播放器改变，结果是它相对于视频的位置和大小是固定的。</p><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><p>目前只有交互按钮支持一些简单的点击效果，转跳到视频某个时间点、新窗口打开其他视频等。</p><p>seek 按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def button c &#123;</span><br><span class="line">    text = &quot;跳转到30分钟&quot;</span><br><span class="line">    x = 35%</span><br><span class="line">    y = 45%</span><br><span class="line">    fontSize = 5%</span><br><span class="line">    textColor = 0xffffff</span><br><span class="line">    fillColor = 0x80D8FF</span><br><span class="line">    target = seek &#123;</span><br><span class="line">        time = 30m</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>av 跳转按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def button c &#123;</span><br><span class="line">    text = &quot;av1714157&quot;</span><br><span class="line">    x = 35%</span><br><span class="line">    y = 45%</span><br><span class="line">    fontSize = 5%</span><br><span class="line">    textColor = 0xffffff</span><br><span class="line">    fillColor = 0x80D8FF</span><br><span class="line">    duration = 2s</span><br><span class="line">    target = av &#123;</span><br><span class="line">        av = 1714157</span><br><span class="line">        page = 1</span><br><span class="line">        time = 20.5s500ms</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bangumi 跳转按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def button c &#123;</span><br><span class="line">    text = &quot;第22话 春风&quot;</span><br><span class="line">    x = 35%</span><br><span class="line">    y = 45%</span><br><span class="line">    fontSize = 5%</span><br><span class="line">    textColor = 0xffffff</span><br><span class="line">    fillColor = 0x80D8FF</span><br><span class="line">    duration = 2s</span><br><span class="line">    target = bangumi &#123;</span><br><span class="line">        seasonId = 1699</span><br><span class="line">        episodeId = 80041</span><br><span class="line">        time = 1m30s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h4><p>可以使用 path 对象绘制 svg 图形，d 属性对应 svg 的路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def path p &#123;</span><br><span class="line">    d = &quot;M30.828,30.422 18.997,16.260 Z&quot;</span><br><span class="line">    viewBox=&quot;0 0 32 34&quot;</span><br><span class="line">    x = 45%</span><br><span class="line">    y = 45%</span><br><span class="line">    scale = 3</span><br><span class="line">    borderWidth = 1</span><br><span class="line">    borderColor = 0xffffff</span><br><span class="line">    borderAlpha = 0.8</span><br><span class="line">    fillColor = 0x00a1d6</span><br><span class="line">    fillAlpha = 0.8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>动画分为简单动画、串联动画、并联动画。</p><p>弹幕的属性有可渐变、不可渐变、不可变之分，只有可渐变属性才有正常的动画效果，对非渐变属性设置新值会立即生效，对不可变的属性设值将被忽略。原则上某一属性在一个 set 语句中最多只能出现一次，在实现上，如果多次出现，以最后一次为准。</p><p>串联动画以先后顺序运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">  content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set a &#123;</span><br><span class="line">    color = 0x000000</span><br><span class="line">&#125; 1s</span><br><span class="line">then set a &#123;</span><br><span class="line">    alpha = 0</span><br><span class="line">&#125; 1s</span><br></pre></td></tr></table></figure><p>并联动画同时进行，并联相同属性时，以最后一次为准，之前冲突的动画会被忽略，由于技术限制，x y rotateX rotateY rotateZ scale 视为相同属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">  content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set a &#123;</span><br><span class="line">    color = 0x000000</span><br><span class="line">&#125; 1s</span><br><span class="line">set a &#123;</span><br><span class="line">    alpha = 0</span><br><span class="line">&#125; 1s</span><br></pre></td></tr></table></figure><h2 id="BAS-弹幕的前端实现"><a href="#BAS-弹幕的前端实现" class="headerlink" title="BAS 弹幕的前端实现"></a>BAS 弹幕的前端实现</h2><p>从 BAS 脚本到渲染在浏览器的 DOM 元素主要有以下步骤：</p><ol><li>将 BAS 脚本解析成 js 对象（<a href="https://github.com/aristotle9/as3cc" target="_blank" rel="noopener">https://github.com/aristotle9/as3cc</a>）</li><li>应用默认值、计算百分比值</li><li>监控生命周期</li><li>解决属性冲突</li><li>绘制元素、应用样式和动画</li><li>绑定交互事件</li></ol><h3 id="定位-1"><a href="#定位-1" class="headerlink" title="定位"></a>定位</h3><p>定位由 BAS 脚本的锚点（anchorX anchorY）和位置（x y）共同决定，实现上使用两个嵌套的 DOM 元素，外部元素定位舞台位置，内部元素定位弹幕锚点，比如一个居中的文本对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def text c &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">    x = 50%</span><br><span class="line">    y = 50%</span><br><span class="line">    anchorX = 0.5</span><br><span class="line">    anchorY = 0.5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染出的 DOM 结构大概是这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"transform:translate((舞台宽度*50%)px, (舞台高度*50%)px);"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"transform:translate(-50%,-50%);"</span>&gt;</span>BAS弹幕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h3><p>动画上考虑到浏览器兼容性和易用性，CSS3 的 animation 是最佳的选择，其中涉及属性有：</p><table><thead><tr><th style="text-align:left">属性</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">@keyframes</td><td>定义动画</td></tr><tr><td style="text-align:left">animation-name</td><td>对应 @keyframes 动画的名称</td></tr><tr><td style="text-align:left">animation-duration</td><td>动画完成一个周期的时间</td></tr><tr><td style="text-align:left">animation-play-state</td><td>动画运行或者暂停</td></tr><tr><td style="text-align:left">animation-timing-function</td><td>动画的速度曲线</td></tr></tbody></table><h4 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h4><p>沿用上面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def text demo &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set demo &#123;</span><br><span class="line">    alpha = 0</span><br><span class="line">&#125; 5s</span><br></pre></td></tr></table></figure><p>这样一条 BAS 脚本渲染出的 DOM 结构大概是这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@keyframes a1 &#123;</span></span><br><span class="line"><span class="undefined">    100% &#123; opacity:0; &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"animation-name:a1;animation-duration:5s;opacity:1;"</span>&gt;</span>BAS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>keyframes 定义动画关键帧，动画结束时透明度为零；animation-duration 对应动画的时间 5s。</p><h4 id="并联动画"><a href="#并联动画" class="headerlink" title="并联动画"></a>并联动画</h4><p>定义多个keyframes实现多个动画同时运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">    content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set a &#123;</span><br><span class="line">    color = 0x000000</span><br><span class="line">&#125; 1s</span><br><span class="line">set a &#123;</span><br><span class="line">    alpha = 0</span><br><span class="line">&#125; 1s</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@keyframes a1 &#123;</span></span><br><span class="line"><span class="undefined">    100% &#123; color:#000000; &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@keyframes a2 &#123;</span></span><br><span class="line"><span class="undefined">    100% &#123; opacity:0; &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"animation-name:a1,a2;animation-duration:1s,1s;opacity:1;color:#ffffff;"</span>&gt;</span>BAS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="串联动画"><a href="#串联动画" class="headerlink" title="串联动画"></a>串联动画</h4><p>使用 animation-delay 错开不同动画开始的时间，实现串联的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def text a &#123;</span><br><span class="line">  content = &quot;BAS&quot;</span><br><span class="line">&#125;</span><br><span class="line">set a &#123;</span><br><span class="line">    color = 0x000000</span><br><span class="line">&#125; 1s</span><br><span class="line">then set a &#123;</span><br><span class="line">    alpha = 0</span><br><span class="line">&#125; 1s</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@keyframes a1 &#123;</span></span><br><span class="line"><span class="undefined">    100% &#123; color:#000000; &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@keyframes a2 &#123;</span></span><br><span class="line"><span class="undefined">    0% &#123; color:#000000; &#125;</span></span><br><span class="line"><span class="undefined">    100% &#123; color:#000000;opacity:0; &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"animation-name:a1,a2;animation-duration:1s,1s;animation-delay:0s,1s;opacity:1;color:#ffffff;"</span>&gt;</span>BAS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="状态控制"><a href="#状态控制" class="headerlink" title="状态控制"></a>状态控制</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>animation-play-state: running</p><h4 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h4><p>animation-play-state: paused</p><h4 id="中间状态"><a href="#中间状态" class="headerlink" title="中间状态"></a>中间状态</h4><p>设置 animation-delay 为负值就可以实现从某个中间状态开始动画。</p><p>比如弹幕的生命周期对应视频的 1s 到 5s，视频跳转到 4s 时，需要设置弹幕 animation-delay 属性为 -1s。</p><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>生命周期结束需要及时清除元素，原理是 animation 动画结束会触发 animationend 事件，该事件触发时清除掉元素即可。元素没有动画时需要指定一个空动画。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@keyframes a1 &#123;</span></span><br><span class="line"><span class="undefined">    100% &#123; &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>End.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;如果你好奇 B 站的工作有不有趣，或者我来 B 站之后都在做什么，那么这篇文章或许可以解答你的部分疑问。&lt;/p&gt;&lt;p&gt;来 B 站后，除了负责 HTML5 播放器的一些模块、重构和日常维护以外，BAS 高级弹幕算是我半年来负责开发的最大一个项目了。&lt;/p&gt;&lt;p&gt;本文整理自今天在公司的超极电磁波分享（据说我还是有史以来年龄最小的讲师(=・ω・=)，也算是对这个项目的一个阶段性总结。&lt;/p&gt;
    
    </summary>
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>我喜欢的音乐</title>
    <link href="https://diygod.me/my-favorite-songs/"/>
    <id>https://diygod.me/my-favorite-songs/</id>
    <published>2017-12-06T00:01:30.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer1"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=playlist&id=35798529",success:function(e){var a=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",listmaxheight:"280px",mode:"random",music:JSON.parse(e)});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>&nbsp;</p><p>听了几年网易云音乐积累的音乐，女声、日语为主（也可能会有一些奇奇怪怪的歌曲<br>同步自：<a href="http://music.163.com/#/playlist?id=35798529" target="_blank" rel="noopener">DIYgod喜欢的音乐 - 网易云音乐</a><br>自豪地使用 <a href="https://github.com/metowolf/Meting" target="_blank" rel="noopener">Meting</a> 和 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 构建</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;aplayer&quot; id=&quot;aplayer1&quot;&gt;&lt;/div&gt;&lt;script&gt;$(function(){$.ajax({url:&quot;https://api.i-meto.com/meting/api?server=netease&amp;type=playlist&amp;id
      
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>可能是目前最好用的两个 Hexo 播放器插件</title>
    <link href="https://diygod.me/best-players-in-hexo/"/>
    <id>https://diygod.me/best-players-in-hexo/</id>
    <published>2017-11-29T15:14:37.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>我实在也不是谦虚，这<del>可能</del>是目前最好用的两个 Hexo 播放器插件，感谢插件作者（给大佬们递女装<br>本文只作为演示，使用方法和 issue 请移步 GitHub<br><a id="more"></a></p><h1 id="hexo-tag-aplayer"><a href="#hexo-tag-aplayer" class="headerlink" title="hexo-tag-aplayer"></a><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><p>Hexo 的 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 标签插件，由 <a href="https://github.com/grzhan" target="_blank" rel="noopener">@grzhan</a> 维护</p><div class="aplayer" id="aplayer1"></div><script>$(function(){var e=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",music:[{title:"あっちゅ～ま青春!",author:"七森中☆ごらく部",url:"https://dplayer.b0.upaiyun.com/yuruyuri.mp3",pic:"https://dplayer.b0.upaiyun.com/yuruyuri.jpg",lrc:"https://dplayer.b0.upaiyun.com/yuruyuri.lrc"},{title:"secret base~君がくれたもの~",author:"茅野愛衣",url:"https://dplayer.b0.upaiyun.com/secretbase.mp3",pic:"https://dplayer.b0.upaiyun.com/secretbase.jpg",lrc:"https://dplayer.b0.upaiyun.com/secretbase.lrc"},{title:"回レ！雪月花",author:"小倉唯",url:"https://dplayer.b0.upaiyun.com/snowmoonflowers.mp3",pic:"https://dplayer.b0.upaiyun.com/snowmoonflowers.jpg",lrc:"https://dplayer.b0.upaiyun.com/snowmoonflowers.lrc"}]});window.aplayers||(window.aplayers=[]),window.aplayers.push(e)})</script><p>&nbsp;</p><h1 id="hexo-tag-dplayer"><a href="#hexo-tag-dplayer" class="headerlink" title="hexo-tag-dplayer"></a><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a></h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br></pre></td></tr></table></figure><p>Hexo 的 <a href="https://github.com/MoePlayer/DPlayer" target="_blank" rel="noopener">DPlayer</a> 标签插件，由 <a href="https://github.com/Myer921" target="_blank" rel="noopener">@Myer921</a> <a href="https://github.com/dixyes" target="_blank" rel="noopener">@dixyes</a> 维护</p><div class="dplayer" id="dplayer1"></div><script>$(function(){var a=new DPlayer({container:document.getElementById("dplayer1"),video:{url:"https://dplayer.b0.upaiyun.com/hikarunara.mp4",pic:"https://dplayer.b0.upaiyun.com/hikarunara.png",thumbnails:"https://dplayer.b0.upaiyun.com/hikarunara_thumbnails.jpg"},danmaku:{id:"diygodme1",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我实在也不是谦虚，这&lt;del&gt;可能&lt;/del&gt;是目前最好用的两个 Hexo 播放器插件，感谢插件作者（给大佬们递女装&lt;br&gt;本文只作为演示，使用方法和 issue 请移步 GitHub&lt;br&gt;
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>做了一点微小的改动</title>
    <link href="https://diygod.me/new-blog/"/>
    <id>https://diygod.me/new-blog/</id>
    <published>2017-11-26T05:42:42.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p>新的开始，只做了一点微小的改动</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>从 www.anotherhome.net 换成了 diygod.me<br>anotherhome.net 起源于高中比较喜欢的一部番《Another》，年代有些久远，现在剧情都已经记不清了<br><a id="more"></a></p><h3 id="博客程序"><a href="#博客程序" class="headerlink" title="博客程序"></a>博客程序</h3><p>从 WordPress 换到了 Hexo<br>Hexo 是基于 Node.js 的静态博客框架，作为一名不会 php 的弱鸡前端，还是 Hexo 用起来更方便<br>现在博客托管在 GitHub，用又拍云作 CDN，不用再自己维护服务器了</p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>样式基本保持了一致<br>基于 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a> 重构了之前使用的 WordPress 主题，取名 <a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener">Sagiri</a>，我的主题跟纱雾一样可爱<br>除了更可爱，又在原主题基础上加了使用 Webpack 打包 js 的改进和 pjax 的处理</p><p>主题虽然开源了，但是属于自用性质的项目，很多应该做成可定制化的地方都没有做，从开源项目的视角来看做得并不好，而我目前又对制作主题并没有太高的兴致，所以使用之前还请慎重考虑</p><h3 id="博客名"><a href="#博客名" class="headerlink" title="博客名"></a>博客名</h3><p>既然域名都换了，博客名就也从 Anotherhome 换成了 Hi, DIYgod</p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>没了 WordPress 的原生评论，这个还是挺头疼的，纠结了很久最后选了 disqus，然后把之前的评论都迁移过来了<br>想要正常使用需要针对 disq.us | disquscdn.com | disqus.com 启用代理</p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>很多老文章已经失去了意义，就删了一大半</p><h3 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h3><p>需要重新申请<br>希望先友后链，原则上不再接受不太熟悉的人</p><h3 id="旧存档"><a href="#旧存档" class="headerlink" title="旧存档"></a>旧存档</h3><p><a href="https://archive.anotherhome.net" target="_blank" rel="noopener">https://archive.anotherhome.net</a><br>存档关闭了所有评论，可能会随时挂掉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的开始，只做了一点微小的改动&lt;/p&gt;&lt;h3 id=&quot;域名&quot;&gt;&lt;a href=&quot;#域名&quot; class=&quot;headerlink&quot; title=&quot;域名&quot;&gt;&lt;/a&gt;域名&lt;/h3&gt;&lt;p&gt;从 www.anotherhome.net 换成了 diygod.me&lt;br&gt;anotherhome.net 起源于高中比较喜欢的一部番《Another》，年代有些久远，现在剧情都已经记不清了&lt;br&gt;
    
    </summary>
    
      <category term="事件簿" scheme="https://diygod.me/categories/%E4%BA%8B%E4%BB%B6%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://diygod.me/hello-world/"/>
    <id>https://diygod.me/hello-world/</id>
    <published>2017-11-20T11:30:46.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><br><a id="more"></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="事件簿" scheme="https://diygod.me/categories/%E4%BA%8B%E4%BB%B6%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>bilibili2RSS — 使用 RSS 订阅 bilibili up主和番剧</title>
    <link href="https://diygod.me/3264/"/>
    <id>https://diygod.me/3264/</id>
    <published>2017-10-17T01:53:34.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>作为一种过气技术，提供 RSS 订阅源的网站越来越少，每个网站都想把用户尽可能长时间地绑在自己那里，而 RSS 可能会造成负面效果</p><p>但在这个内容爆炸时代，只要意识到了「我被信息所绑架」这个问题后，用户自然会想要一种更高级的聚合信息和动态更新解决方案，比如 RSS</p><p>这里提供了使用 RSS 订阅 bilibili up主和番剧的解决方案</p><p>订阅up主：<a href="https://api.prprpr.me/bilibili2rss/user/6997378" target="_blank" rel="noopener">https://api.prprpr.me/bilibili2rss/user/6997378</a></p><p>订阅番剧：<a href="https://api.prprpr.me/bilibili2rss/bangumi/6446" target="_blank" rel="noopener">https://api.prprpr.me/bilibili2rss/bangumi/6446</a></p><p>订阅分区：<a href="https://api.prprpr.me/bilibili2rss/partion/33" target="_blank" rel="noopener">https://api.prprpr.me/bilibili2rss/partion/33</a></p><p>项目名叫 bilibili2RSS，开源在 <a href="https://github.com/DIYgod/bilibili2RSS" target="_blank" rel="noopener">GitHub</a></p><p>另外可以使用相关项目 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 订阅喜欢的微博博主</p><p>Enjoy!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一种过气技术，提供 RSS 订阅源的网站越来越少，每个网站都想把用户尽可能长时间地绑在自己那里，而 RSS 可能会造成负面效果&lt;/p&gt;&lt;p&gt;但在这个内容爆炸时代，只要意识到了「我被信息所绑架」这个问题后，用户自然会想要一种更高级的聚合信息和动态更新解决方案，比如 RSS
      
    
    </summary>
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>我们走过的</title>
    <link href="https://diygod.me/3207/"/>
    <id>https://diygod.me/3207/</id>
    <published>2017-08-28T02:23:24.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<style>#love-map{width:100%}#love-time{text-align:center;margin-bottom:20px;font-size:14px;color:#ef9a9a;display:none}</style><div id="love-time">这是我们共同度过的第<span></span></div><br><div id="love-map"></div><p>上面是一些我们一起去过的地方，其中有一个地点标的是 1996 年，这并不是我写错了，那年我 1 岁，我们是邻居，遗憾的是我们对那几年都没有任何记忆了<a id="more"></a></p><p>&nbsp;</p><p>之后一晃 13 年，刚上高中，我家搬到了高中旁边的一个小区，一天晚上我妈兴奋地跟我说：你猜我晚上散步遇到了谁？</p><p>我肯定是猜不出来的，因为我什么都不记得</p><p>再后来发现她跟我一个班，就这样故事继续了</p><p>那时候每天放学一起回家，关系很亲密，家长老师都很紧张，以为我们在早恋，但我一直在沉迷学习，实际上什么都没发生，放学路上聊的最多的也是功课，现在想起来甚至有些遗憾</p><p>&nbsp;</p><p>但有趣的灵魂终会相遇，5 年以后，这个人又被我诱骗成了女票，我们的故事还会继续下去</p><p>&nbsp;</p><p>回想一下，这些情节居然跟你的名字有一些神似</p><p>（是不会放照片的，长相和性格可以脑补扎着单马尾的岁纳京子</p><script>function love_time(){window.setTimeout(function(){love_time()},1e3);var e=new Date("5/11/2017 00:00:00"),t=((new Date).getTime()-e.getTime())/864e5,o=Math.floor(t),a=24*(t-o),n=Math.floor(a),r=60*(a-n),i=Math.floor(60*(a-n)),m=Math.floor(60*(r-i));$("#love-time span").html(o+"天"+n+"小时"+i+"分"+m+"秒")}function myEcharts(){$("#love-map").height(.8*$("#love-map").width());var e=echarts.init(document.getElementById("love-map"));option=null;var t={"临沂":[118.35,35.05],"武汉":[114.31,30.52],"杭州":[120.19,30.26],"上海":[121.48,31.22],"昆明":[102.73,25.04],"大理":[100.225668,25.589449],"济南":[117,36.65]};option={backgroundColor:"#A7B1CA",geo:{map:"china",label:{emphasis:{show:!1}},roam:!1,itemStyle:{normal:{areaColor:"#fff",borderColor:"#C9CED9"},emphasis:{areaColor:"#DFE0E3"}}},tooltip:{trigger:"item",formatter:function(e){return e.name+" - "+e.value[2]}},series:[{type:"effectScatter",coordinateSystem:"geo",data:function(e){for(var o=[],a=0;a<e.length;a++){var n=t[e[a].name];n&&o.push({name:e[a].name,value:n.concat(e[a].value)})}return o}([{name:"临沂",value:"1996"},{name:"武汉",value:"2015.12"},{name:"杭州",value:"2017.01"},{name:"上海",value:"2017.02"},{name:"昆明",value:"2017.05"},{name:"大理",value:"2017.05"},{name:"济南",value:"2017.05"}]),symbolSize:8,showEffectOn:"render",rippleEffect:{brushType:"stroke"},hoverAnimation:!0,label:{normal:{formatter:"{b}",position:"right",fontSize:14,show:!0}},itemStyle:{normal:{color:"#FD8888"}}}]},e.setOption(option,!0)}$("#love-time").show(),love_time(),window.echarts?myEcharts():$.getScript("https://cdn.bootcss.com/echarts/3.8.5/echarts.min.js",function(){$.getScript("https://cdn.jsdelivr.net/npm/echarts@3.8.5/map/js/china.js",function(){myEcharts()})})</script>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;#love-map{width:100%}#love-time{text-align:center;margin-bottom:20px;font-size:14px;color:#ef9a9a;display:none}&lt;/style&gt;&lt;div id=&quot;love-time&quot;&gt;这是我们共同度过的第&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div id=&quot;love-map&quot;&gt;&lt;/div&gt;&lt;p&gt;上面是一些我们一起去过的地方，其中有一个地点标的是 1996 年，这并不是我写错了，那年我 1 岁，我们是邻居，遗憾的是我们对那几年都没有任何记忆了
    
    </summary>
    
      <category term="闲言语" scheme="https://diygod.me/categories/%E9%97%B2%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>野生 DIYgod 捕获指南</title>
    <link href="https://diygod.me/3163/"/>
    <id>https://diygod.me/3163/</id>
    <published>2017-08-14T01:00:59.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-size:10pt"><em>嘘~ 你们看，我发现了什么？这里有一只落单的 DIYgod，我们可以尝试捕捉它，一只 DIYgod 可以为我们提供好几天的能量，它们富含大量的蛋白质，不过 DIYgod 可不好对付。我们慢慢从后面接近它，小心别发出任何声音。</em></span></p><p>&nbsp;</p><p>DIYgod 可能会在任何地方出现，但只要掌握了 DIYgod 的习性，捕获一只 DIYgod 并不是一件很难的事情<a id="more"></a></p><p>&nbsp;</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p><a href="https://t.me/awesomeDIYgod" target="_blank" rel="noopener">Telegram Channel</a>：使用 <a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a> 整合了 DIYgod 的 Twitter、GitHub、微博、博客、直播等几乎全部的更新，和一些不想或懒得发到社交网络的内容</p><p><a href="https://diygod.me/atom.xml">博客 RSS</a>：就是这里</p><p><del><a href="https://api.prprpr.me/weibo/rss/3306934123" target="_blank" rel="noopener">微博 RSS</a>：使用 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">WeiboRSS</a> 构建</del></p><p>&nbsp;</p><h2 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h2><p><a href="https://twitter.com/" target="_blank" rel="noopener">Twitter</a>：日常、乱七八糟</p><p><a href="https://github.com/DIYgod" target="_blank" rel="noopener">GitHub</a>：emmmm…同性交友</p><p><a href="https://live.bilibili.com/63489" target="_blank" rel="noopener">bilibili 直播</a>：不定期有直播看，可能有奇奇怪怪的内容</p><p><a href="https://www.zhihu.com/people/diygod" target="_blank" rel="noopener">知乎</a>：经常点赞但很少回答问题</p><p>&nbsp;</p><h2 id="群"><a href="#群" class="headerlink" title="群"></a>群</h2><p>芳文社的埃罗芒阿老师：496685635，主群，无主题随便撩，经常换奇奇怪怪的名字</p><p><del>网红女装屁股战队：624503765，守望先锋开黑</del></p><p><del>吃🐔：669026238，大吉大利，今晚吃鸡</del></p><p><del>MC的同居生活：397976165，MC 开黑，想一起玩需要申请白名单</del></p><p>MoePlayer 交流群：415835947，<a href="https://github.com/MoePlayer" target="_blank" rel="noopener">MoePlayer</a> 相关讨论</p><p><del>线下女装活动小分队：605133465，漫展、面基等线下活动，平时很冷清</del></p><p><a href="https://t.me/prpr233" target="_blank" rel="noopener">芳文社的埃罗芒阿老师（Telegram）</a>：没有言论审查</p><p><del><a href="https://t.me/adplayer" target="_blank" rel="noopener">MoePlayer 交流群（Telegram）</a>：<a href="https://github.com/MoePlayer" target="_blank" rel="noopener">MoePlayer</a> 相关讨论</del></p><p>&nbsp;</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://github.com/MoePlayer" target="_blank" rel="noopener">MoePlayer</a>：萌豚技术组织，播放器、音视频、弹幕、解析相关开源开发，<a href="http://player.moe/" target="_blank" rel="noopener">官网</a>建设中，附属有一个私有 Telegram 群，想加可以联系 DIYgod 带上 GitHub 和 Telegram 账号</p><p>&nbsp;</p><h2 id="最喜欢的"><a href="#最喜欢的" class="headerlink" title="最喜欢的"></a>最喜欢的</h2><p><a href="http://weibo.com/573959922" target="_blank" rel="noopener">发小</a>、<a href="https://suannai.cat/" target="_blank" rel="noopener">酸奶</a>、<a href="https://zh.moegirl.org/zh-hans/%E6%91%87%E6%9B%B3%E7%99%BE%E5%90%88" target="_blank" rel="noopener">摇曳百合</a>、<a href="https://space.bilibili.com/883968#!/" target="_blank" rel="noopener">暴走大事件</a>、<a href="https://space.bilibili.com/6997378" target="_blank" rel="noopener">微小微</a>、<a href="http://www.zimuzu.tv/resource/10733" target="_blank" rel="noopener">权力的游戏</a>、<a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a>、<a href="https://github.com/DIYgod" target="_blank" rel="noopener">写代码</a>、<a href="https://diygod.me/links">你们</a></p><p>&nbsp;</p><h2 id="最讨厌的"><a href="#最讨厌的" class="headerlink" title="最讨厌的"></a>最讨厌的</h2><p><a href="http://www.alibabagroup.com/" target="_blank" rel="noopener">阿里</a>、墙</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:10pt&quot;&gt;&lt;em&gt;嘘~ 你们看，我发现了什么？这里有一只落单的 DIYgod，我们可以尝试捕捉它，一只 DIYgod 可以为我们提供好几天的能量，它们富含大量的蛋白质，不过 DIYgod 可不好对付。我们慢慢从后面接近它，小心别发出任何声音。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;DIYgod 可能会在任何地方出现，但只要掌握了 DIYgod 的习性，捕获一只 DIYgod 并不是一件很难的事情
    
    </summary>
    
      <category term="闲言语" scheme="https://diygod.me/categories/%E9%97%B2%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>让咕咕机再次伟大</title>
    <link href="https://diygod.me/3116/"/>
    <id>https://diygod.me/3116/</id>
    <published>2017-08-11T02:11:43.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<style>.gugu-print{display:none;margin-top:20px}.gugu-btn{cursor:pointer;border:1px solid #eee;display:inline-block;padding:5px 10px;background:#fff;border-radius:4px}.gugu-login-btn-wrap{text-align:center}.gugu-login-btn{cursor:pointer}.gugu-user{display:none;text-align:center}.gugu-avatar{display:inline-block;height:50px;width:50px;background-size:contain;border-radius:50%}.gugu-info{padding-top:25px;font-weight:700;line-height:25px}.gugu-name{font-size:18px}.gugu-textarea{width:100%;height:100px;font-size:14px;padding:10px;box-sizing:border-box}.gugu-input{width:100%;font-size:14px;padding:10px;box-sizing:border-box}</style><p>咕咕机的官方发送平台非常反人类，发送接口没有任何长度和频率限制，又可以匿名发送…所以经常被人刷垃圾信息…群里经常有人反馈但官方就是不改…好在咕咕机是开发接口的</p><p>就这样我封装了一个增强版 API，开源在 GitHub： <a href="https://github.com/DIYgod/gugu-node-api" target="_blank" rel="noopener">https://github.com/DIYgod/gugu-node-api</a></p><p>特性：强制微博登录、不允许匿名、长度限制、发送频率限制、跨域限制、黑名单机制</p><p>好了，点击下面按钮，登录后继续跟我表白吧！</p><p></p><div class="gugu-login-btn-wrap"><img class="no-fancybox gugu-login-btn" src="/images/weibo2login.png"></div><p></p><p></p><div class="gugu-user"><br><div class="gugu-info"><br><div class="gugu-avatar"></div><br><div class="gugu-name"></div><br></div><br><div class="gugu-btn gugu-logout-btn">退出登录</div><br></div><p></p><p></p><div class="gugu-print"><br><textarea class="gugu-textarea" placeholder="输入文本内容"></textarea><br><div class="gugu-btn gugu-send-btn-text">咕咕文字</div><br><input type="text" class="gugu-input" placeholder="输入图片地址"><br><div class="gugu-btn gugu-send-btn-pic">咕咕图片</div><br></div><p></p><script>function gugushow(t){$.ajax({url:"https://api.anotherhome.net/gugu/account",xhrFields:{withCredentials:!0},success:function(t){t&&($(".gugu-avatar").css("background-image","url("+t._json.avatar_large.replace("http","https")+")"),$(".gugu-name").html("Hi, "+t.displayName),$(".gugu-user").show(),$(".gugu-print").show(),$(".gugu-login-btn-wrap").hide())}})}gugushow(),$(".gugu-login-btn").click(function(){window.location.href="https://api.anotherhome.net/gugu/login"}),$(".gugu-logout-btn").click(function(){window.location.href="https://api.anotherhome.net/gugu/logout"}),$(".gugu-send-btn-text").click(function(){$(".gugu-textarea").val()&&$.ajax({url:"https://api.anotherhome.net/gugu/print",type:"post",data:JSON.stringify({type:"1",content:$(".gugu-textarea").val()}),xhrFields:{withCredentials:!0},success:function(t){t?t.code&&t.msg?notie("error",t.msg):t.msg?notie("success",t.msg):notie("error","打印失败"):notie("error","打印失败")},error:function(){notie("error","打印失败")}})}),$(".gugu-send-btn-pic").click(function(){$.ajax({url:"https://api.anotherhome.net/gugu/print",type:"post",data:JSON.stringify({type:"2",content:$(".gugu-input").val()}),xhrFields:{withCredentials:!0},success:function(t){t?t.code&&t.msg?notie("error",t.msg):t.msg?notie("success",t.msg):notie("error","打印失败"):notie("error","打印失败")},error:function(){notie("error","打印失败")}})})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;.gugu-print{display:none;margin-top:20px}.gugu-btn{cursor:pointer;border:1px solid #eee;display:inline-block;padding:5px 10px;backgro
      
    
    </summary>
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>现在可以给网红写小纸条表白了！</title>
    <link href="https://diygod.me/2978/"/>
    <id>https://diygod.me/2978/</id>
    <published>2017-07-02T22:46:40.000Z</published>
    <updated>2018-06-12T18:29:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>最近跟我表白的人太多了，所以我买了一个<a href="http://www.memobird.cn" target="_blank" rel="noopener">咕咕机</a>，现在访问 <a href="/make-gugu-great-again">让咕咕机再次伟大</a> 就可以很方便地写小纸条跟我表白了。<a id="more"></a></p><p>比如</p><p><img src="/images/gugu1.jpg" alt=""></p><p>就像小时候偷偷在课桌间传递的小纸条一样温暖。</p><p>&nbsp;</p><p>除此之外，咕咕机还可以做很多有趣的事情：<a href="https://www.zhihu.com/question/39529878" target="_blank" rel="noopener">MEMOBIRD 咕咕机有哪些有趣的玩法？</a></p><p>再加上咕咕机是<a href="http://open.memobird.cn/" target="_blank" rel="noopener">开放API</a>的，又可以连接 <a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a>，对一个开发者来说可以做的事情就更多了，比如配合 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 和 IFTTT 还可以用来实时打印喜欢的小姐姐新发的微博。</p><p>&nbsp;</p><p>今年的送明信片活动也打算用这个来报名，诶嘿嘿。</p><p>[hermit autoplay=”false” mode=”circulation”]netease_songlist#:28445467[/hermit]</p><p>以下（给我打印宪法）是错误的用法：</p><p><img src="/images/gugu2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近跟我表白的人太多了，所以我买了一个&lt;a href=&quot;http://www.memobird.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;咕咕机&lt;/a&gt;，现在访问 &lt;a href=&quot;/make-gugu-great-again&quot;&gt;让咕咕机再次伟大&lt;/a&gt; 就可以很方便地写小纸条跟我表白了。
    
    </summary>
    
      <category term="闲言语" scheme="https://diygod.me/categories/%E9%97%B2%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>Service Workers 实现网站加速和离线缓存</title>
    <link href="https://diygod.me/2954/"/>
    <id>https://diygod.me/2954/</id>
    <published>2017-03-06T22:42:12.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了 Service Workers 这个东西，它可以根据配置为用户缓存网站静态与动态资源：截获用户的所有网络请求，根据缓存配置来决定是从缓存还是网络获取相应资源，从而可以极大提高网页的加载速度。优点有可定制性高、不需要服务端支持、效果显著。</p><p>最后的效果就是当你第二次访问我的网站时只会加载大约80k 的资源（除去 AdSense 的情况下），这其中包括了所有图片和音频视频，这 80k 主要是 HTML 和我使用的 <a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a> 的 API。</p><p><img src="/images/sw4.jpg" alt=""></p><p>甚至可以在断开网络时访问（剪断网线试试吧）：</p><p><img src="/images/sw2.jpg" alt=""></p><p><a id="more"></a>当然局限性也是有的：</p><p>只支持 HTTPS，因为可以截获用户的网络请求，需要在一个安全的环境。</p><p>兼容性不太好，<a href="http://caniuse.com/#search=service%20worker" target="_blank" rel="noopener">点击查看兼容性报告</a>，目前只有 Chrome Firefox Opera 和部分 Android 浏览器 支持。</p><p><img src="/images/sw3.jpg" alt=""></p><p>使用方法网上有很多教程，这里不赘述了，推荐这几篇吧：</p><p><a href="https://metaquant.org/service%20worker-web%20performance-cache.html" target="_blank" rel="noopener">使用service worker+sw-precache实现网站加速</a></p><p><a href="https://yangbo.tech/2017/01/15/2017-01-15-speedy-and-offline-site-by-service-worker/" target="_blank" rel="noopener">使用Service worker实现加速/离线访问静态blog网站</a></p><p><a href="https://segmentfault.com/a/1190000008491458" target="_blank" rel="noopener">Service Workers 与离线缓存</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到了 Service Workers 这个东西，它可以根据配置为用户缓存网站静态与动态资源：截获用户的所有网络请求，根据缓存配置来决定是从缓存还是网络获取相应资源，从而可以极大提高网页的加载速度。优点有可定制性高、不需要服务端支持、效果显著。&lt;/p&gt;&lt;p&gt;最后的效果就是当你第二次访问我的网站时只会加载大约80k 的资源（除去 AdSense 的情况下），这其中包括了所有图片和音频视频，这 80k 主要是 HTML 和我使用的 &lt;a href=&quot;https://github.com/DIYgod/DPlayer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DPlayer&lt;/a&gt; 的 API。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/sw4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;甚至可以在断开网络时访问（剪断网线试试吧）：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/sw2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>一只叫酸奶的喵</title>
    <link href="https://diygod.me/2939/"/>
    <id>https://diygod.me/2939/</id>
    <published>2017-03-02T22:31:04.000Z</published>
    <updated>2018-06-12T18:29:45.695Z</updated>
    
    <content type="html"><![CDATA[<p>酸奶是我家新招的猫女仆，她有一个博客：<a href="https://suannai.cat/" target="_blank" rel="noopener">https://suannai.cat</a></p><p><img src="/images/suannai.png" alt=""><a id="more"></a></p><p>Q: 你是谁？<br>A: 我是酸奶，来自喵星，是个可爱的女孩子，我的铲屎官是 DIYgod，对他好点，他是我罩的。</p><p>Q: 你的身世是怎样的？<br>A: 我还有6个兄弟姐妹，有一个姐姐（<a href="http://blog.zanyuyu.com/tags/%E7%8C%AB/" target="_blank" rel="noopener">蛋糕</a>）在<a href="http://weibo.com/zanyuyu" target="_blank" rel="noopener">赞鱼鱼</a>家；2017 年 2 月 23 日起正式雇佣 DIYgod 为我的铲屎官。</p><p>Q: 你多大了？<br>A: 50多天了，所以不要把我当一个月的小屁喵看待了。</p><p>Q: 你是什么品种的？<br>A: 美短，加白，非纯种。</p><p>Q: 你最喜欢什么？<br>A: 吃肉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;酸奶是我家新招的猫女仆，她有一个博客：&lt;a href=&quot;https://suannai.cat/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://suannai.cat&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/suannai.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
</feed>
